installedpkgs
1000-94
64/0.6
64*0.6
64+(0.4*64)
160*0.6
169*0.6
27*4
108*0.6
57*0.78
56*0.78
40*4
160*0.6
160*0.5
122.82*0.78
50+50-25*0+2+2
40*4
(160-95) / 10
16/40
13/40
seq(95, 160, 6.5)
seq(90,160,6.5)
(160-90)
(160-90)/10
seq(90,160,7)
160*.6
0.78*129.12
60/10
seq(100,160,6)
(100-96) / 10
160-96
64 / 10
seq(96,160,6)
seq(96,160,6.4)
50/4
test <- c("a", "b", "c")
expand.grid("test")
expand.grid(test)
library(tidyverse)
combn(test)
combn(test, length(test))
combn(test, 1)
anagram <- function(word,anagrams) {
lista.anagrams=list()
for(i in anagrams){
anagram.split=unlist(strsplit(i,""))
word.split=unlist(strsplit(word,""))
anagram.sort=sort(anagram.split)
word.sort=sort(word.split)
anagram.sort.lower=tolower(anagram.sort)
word.sort.lower=tolower(word.sort)
lower.word=tolower(word)
lower.anagram=tolower(i)
if (!(identical(lower.word,lower.anagram))){
if (identical(anagram.sort.lower,word.sort.lower)){
lista.anagrams <- list(unlist(c(lista.anagrams, i),recursive=FALSE))
print(lista.anagrams)
}
}
}
}
anagram("bundestagswahl")
test <- c("a", "b", "c")
combn(test)
?permn
library(combinat)
install.packages("combinat")
library(combinat)
?permn
permn(test)
permn(test)
x <- permn(test)
paste0(x[[1]])
paste0(x[[1]], collapse = "")
sapply(1:length(x), function(i) paste0(x[[1]], collapse = ""))
sapply(1:length(x), function(i) paste0(x[[i]], collapse = ""))
anagrams <- function(word) {
word <- unlist(strsplit(word, ""))
x <- permn(word)
y <- sapply(1:length(x), function(i) paste0(x[[i]], collapse = ""))
return(y)
}
anagrams("bundestagswahl")
anagrams("abc")
anagrams("Bundestag")
anagrams("Bundestagswahl")
word <- unlist(strsplit("Bundestagswahl", ""))
word
x <- permn(word)
# install.packages("combinat")
library(combinat)
library(tidyverse)
anagrams <- function(word) {
word <- unlist(strsplit(word, ""))
x <- permn(word)
y <- sapply(1:length(x), function(i) paste0(x[[i]], collapse = ""))
return(y)
}
anagrams("Bundestagswahl")
anagrams("Bundestags")
permn
unlist(strsplit("bundestagswahl"))
x <- unlist(strsplit("bundestagswahl", ""))
x
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% sample(., collapse = "")  paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% sample(., collapse = "") %>%  paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% sample(collapse = "") %>%  paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% sample(length(.)) %>%  paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% sample(length(.)) %>%  paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% sample(length(.)) %>%  paste0(collapse = "")
unlist(strsplit("stuebladhnw", "")) %>% sample(length(.)) %>%  paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "")
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
sample(x, length(x)) %>% paste0(collapse = "") %>% toupper
nchar("weshalbnagstdu")
nchar("bundestagswahl")
x <- "this is a test this is another test"
library(tidyverse)
library(ngram)
library(stringi)
library(tidytext)
# split
unlist(strsplit(x, " "))
# split
words <- unlist(strsplit(x, " "))
# get backwards transitional probabilities
words[1]
# function for getting backwards transitional probabilities
words
# text string
x <- "the dog chased the cat"
# initial average transitional probability
avg.tp <- 0
# split
words <- unlist(strsplit(x, " "))
words
paste0(words[2], " ", words[3])
paste0(words[1:3], collapse = " ")
grep(paste0(words[2], " ", words[3]),
paste0(words[1:3], collapse = " "))
length(grep(paste0(words[2], " ", words[3]),
paste0(words[1:3], collapse = " ")))
paste0(words[1:3], collapse = " ")
grep(words[3], paste0(words[1:3], collapse = " "))
# find single word
grep(words[3], paste0(words[1:3], collapse = " "))
library(tidyverse)
library(ngram)
library(stringi)
library(tidytext)
# text string
x <- "the dog chased the cat chased the dog chased the squirrel well we can try to get a bit less repetitive here but hey a bit of repetition does not hurt does it the squirrel chased the cat and the cat chased the squirrel"
# split
words <- unlist(strsplit(x, " "))
# initial average transitional probability
avg.tp <- 0
# empty vector for the chunks
chunkatory <- c()
# table with btp and avg.tp
tbl <- tibble(word = words,
btp = numeric(length(words)),
avg.tp = numeric(length(words)))
for(i in 2:length(words)) {
btp <- str_count(paste0(words[1:i], collapse = " "),
paste0(words[(i-1)], " ", words[i])) /
str_count(paste0(words[1:i], collapse = " "), words[i])
tbl$btp[i] <- btp
# update average btp
if(i == 2) {
avg.tp <- btp
} else {
avg.tp <- mean(c(avg.tp, btp))
}
tbl$avg.tp[i] <- avg.tp
}
tbl$btp_avg_tp <- ifelse(tbl$btp < tbl$avg.tp, "<", ">")
tbl$btp_avg_tp <- ifelse(tbl$btp == tbl$avg.tp, "=", tbl$btp_avg_tp)
tbl
mean(c(0,1))
library(tidyverse)
library(ngram)
library(stringi)
library(tidytext)
# text string
x <- "the dog chased the cat chased the dog chased the squirrel well we can try to get a bit less repetitive here but hey a bit of repetition does not hurt does it the squirrel chased the cat and the cat chased the squirrel"
# split
words <- unlist(strsplit(x, " "))
# initial average transitional probability
avg.tp <- 0
# empty vector for the chunks
chunkatory <- c()
# get transitional probability for each word pair
# backward transitional probability:
# probability of word n following word n-1
# in the material preceding the current word
# table with btp and avg.tp
tbl <- tibble(word = words,
btp = numeric(length(words)),
avg.tp = numeric(length(words)))
for(i in 2:length(words)) {
btp <- str_count(paste0(words[1:i], collapse = " "),
paste0(words[(i-1)], " ", words[i])) /
str_count(paste0(words[1:i], collapse = " "), words[i])
tbl$btp[i] <- btp
# update average btp
avg.tp <- mean(c(avg.tp, btp))
tbl$avg.tp[i] <- avg.tp
}
tbl
tbl$btp_avg_tp <- ifelse(tbl$btp < tbl$avg.tp, "<", ">")
tbl$btp_avg_tp <- ifelse(tbl$btp == tbl$avg.tp, "=", tbl$btp_avg_tp)
tbl
mean(1,0.5)
mean(c(1,0.5))
View(tbl)
tbl
words
paste0(words, collapse = " ")
paste0(words[(2-1)], words[2], collapse = " ")
paste0(words[(2-1)], words[2], sep = " ")
paste0(words[(2-1)], " ", words[2], sep = " ")
paste0(words[(2-1)], " ", words[2])
paste0(words, collapse = " ")
str_count(paste0(words, collapse = " "),
paste0(words[(2-1)], " ", words[2]))
?str_sount
?str_count
str_count(string  = paste0(words, collapse = " "),
pattern = paste0(words[(2-1)], " ", words[2]))
sapply(2:length(words), function(i) str_count(string  = paste0(words, collapse = " "),
pattern = paste0(words[(i-1)], " ", words[i])))
str_count(string  = paste0(words, collapse = " "),
pattern = words[2])
str_count(string  = paste0(words, collapse = " "),
pattern = words[1])
str_count(string  = paste0(words, collapse = " "),
pattern = words[2])
str_count(string  = paste0(words, collapse = " "),
pattern = paste0(words[(2-1)], " ", words[2])) /
str_count(string  = paste0(words, collapse = " "),
pattern = words[2])
sapply(2:length(words), function(i) str_count(string  = paste0(words, collapse = " "),
pattern = paste0(words[(i-1)], " ", words[i])) /
str_count(string  = paste0(words, collapse = " "),
pattern = words[i])
)
# text string
# x <- "the dog chased the cat chased the dog chased the squirrel well we can try to get a bit less repetitive here but hey a bit of repetition does not hurt does it the squirrel chased the cat and the cat chased the squirrel"
x <- "the dog chased the cat"
# split
words <- unlist(strsplit(x, " "))
# initial average transitional probability
avg.tp <- 0
# empty vector for the chunks
chunkatory <- c()
sapply(2:length(words), function(i) str_count(string  = paste0(words, collapse = " "),
pattern = paste0(words[(i-1)], " ", words[i])) /
str_count(string  = paste0(words, collapse = " "),
pattern = words[i])
)
1142.50/4
library(tidyverse)
library(ngram)
library(stringi)
library(tidytext)
# text string
# x <- "the dog chased the cat chased the dog chased the squirrel well we can try to get a bit less repetitive here but hey a bit of repetition does not hurt does it the squirrel chased the cat and the cat chased the squirrel"
x <- "the dog chased the cat"
# split
words <- unlist(strsplit(x, " "))
# initial average transitional probability
avg.tp <- 0
# empty vector for the chunks
chunkatory <- c()
# table with btp and avg.tp
tbl <- tibble(word = words,
btp = numeric(length(words)),
avg.tp = numeric(length(words)))
for(i in 2:length(words)) {
btp <- str_count(paste0(words[1:i], collapse = " "),
paste0(words[(i-1)], " ", words[i])) /
str_count(paste0(words[1:i], collapse = " "), words[i])
tbl$btp[i] <- btp
# update average btp
avg.tp <- mean(c(avg.tp, btp))
tbl$avg.tp[i] <- avg.tp
}
tbl$btp_avg_tp <- ifelse(tbl$btp < tbl$avg.tp, "<", ">")
tbl$btp_avg_tp <- ifelse(tbl$btp == tbl$avg.tp, "=", tbl$btp_avg_tp)
tbl
# table with btp and avg.tp
tbl <- tibble(word = words,
btp = numeric(length(words)),
avg.tp = numeric(length(words)))
for(i in 2:length(words)) {
btp <- str_count(paste0(words[1:i], collapse = " "),
paste0(words[(i-1)], " ", words[i])) /
str_count(paste0(words[1:i], collapse = " "), words[i])
tbl$btp[i] <- btp
# if i == 2, the avg.tp is 1
if(i == 2) {
avg.tp <- 1
}
# update average btp
avg.tp <- mean(c(avg.tp, btp))
tbl$avg.tp[i] <- avg.tp
}
tbl$btp_avg_tp <- ifelse(tbl$btp < tbl$avg.tp, "<", ">")
tbl$btp_avg_tp <- ifelse(tbl$btp == tbl$avg.tp, "=", tbl$btp_avg_tp)
tbl
89.99+24.99
206+105+14+2+1
library(tidyverse)
0.65*71700
46605+7680.6+6293.21+6089.85
66668.66*3
140*3
0.4*13
setwd("~/sciebo/Tutorials/uebersterblichkeit")
library(tidyverse)
library(readxl)
# Daten einlesen (extrahiert aus Excel-Tabelle https://www.destatis.de/DE/Themen/Gesellschaft-Umwelt/Bevoelkerung/Sterbefaelle-Lebenserwartung/Tabellen/sonderauswertung-sterbefaelle.html?nn=209016)
sterbefaelle <- read_csv("sterbefaelle_nach_bundesland.csv", col_types = c("n", "n", "c", "c", rep("n", 42)))
# Spaltennamen anpassen
colnames(sterbefaelle)[5:46] <- paste0("KW", colnames(sterbefaelle)[5:46])
# Gesamtzahl der Sterbefälle
sf <- filter(sterbefaelle, Alter == "Insgesamt")
# in langes Format überführen
sf <- pivot_longer(sf, cols = 5:length(sf))
# KW als numerisch
sf$name <- as.numeric(gsub("KW", "", sf$name))
# Spalte umbenennen
sf <- rename(sf, "KW" = "name")
# value-Spalte als numerisch
sf$value <- as.numeric(gsub(" ", "", sf$value))
# nur KW 36 bis 40
sf36bis40 <- filter(sf, KW %in% c(10:40))
View(sf)
# Daten einlesen
impf <- read_csv("2021-11-16_Deutschland_Impfquoten_COVID-19.csv")
# mit der existierenden Tabelle verbinden
sf <- left_join(sf, select(impf, !Datum), by = "Bundesland")
einw <- read_csv("einwohnerzahl.csv")
sf20162020kws <- sf %>% filter(Jahr %in% 2016:2020) %>% group_by(Bundesland, Jahr) %>% summarise(
deaths = sum(value)
) %>% group_by(Bundesland) %>% summarise(
mean = mean(deaths),
sd = sd(deaths)
)
# Sterblichkeitszahlen 2021
sf2021kws <- sf %>% filter(Jahr==2021) %>% group_by(Bundesland) %>%
summarise(
deaths2021 = sum(value)
)
# einfacher Korrelationskoeffizient
uebersterblichkeit <- left_join(sf20162020kws, sf2021kws)
# Übersterblichkeits-Koeffizient hinzufügen
uebersterblichkeit <- mutate(uebersterblichkeit, ues = (deaths2021 / mean)*100)
# Impfquote hinzufügen
uebersterblichkeit <- left_join(uebersterblichkeit, select(impf, !Datum))
# Pearson-Koeffizient
cor.test(uebersterblichkeit$ues, uebersterblichkeit$Impfungen_gesamt_voll)
uebersterblichkeit$Impfquote_gesamt_voll
uebersterblichkeit %>% select(Bundesland, Impfquote_gesamt_voll)
# Pearson-Koeffizient
cor.test(uebersterblichkeit$ues, uebersterblichkeit$Impfquote_gesamt_voll)
uebersterblichkeit %>% select(Bundesland, ues, Impfquote_gesamt_voll)
uebersterblichkeit %>% select(Bundesland, ues, Impfquote_gesamt_voll) %>% arrange(desc(Impfquote))
uebersterblichkeit %>% select(Bundesland, ues, Impfquote_gesamt_voll) %>% arrange(desc(Impfquote_gesamt_voll))
# zum Vergleich: KW 25 bis 40
sf25bis40 <- filter(sf, KW %in% c(36:40))
# zum Vergleich: KW 25 bis 42
sf25bis42 <- filter(sf, KW %in% c(36:42))
# Daten einlesen
impf <- read_csv("2021-11-16_Deutschland_Impfquoten_COVID-19.csv")
# mit der existierenden Tabelle verbinden
sf <- left_join(sf, select(impf, !Datum), by = "Bundesland")
einw <- read_csv("einwohnerzahl.csv")
sf20162020kws <- sf36bis40 %>% filter(Jahr %in% 2016:2020) %>% group_by(Bundesland, Jahr) %>% summarise(
deaths = sum(value)
) %>% group_by(Bundesland) %>% summarise(
mean = mean(deaths),
sd = sd(deaths)
)
sf20162020kws25ff <- sf25bis40 %>% filter(Jahr %in% 2016:2020) %>% group_by(Bundesland, Jahr) %>% summarise(
deaths = sum(value)
) %>% group_by(Bundesland) %>% summarise(
mean = mean(deaths),
sd = sd(deaths)
)
# Sterblichkeitszahlen 2021
sf2021kws <- sf %>% filter(Jahr==2021) %>% group_by(Bundesland) %>%
summarise(
deaths2021 = sum(value)
)
# einfacher Korrelationskoeffizient
uebersterblichkeit <- left_join(sf20162020kws, sf2021kws)
# Übersterblichkeits-Koeffizient hinzufügen
uebersterblichkeit <- mutate(uebersterblichkeit, ues = (deaths2021 / mean)*100)
# Impfquote hinzufügen
uebersterblichkeit <- left_join(uebersterblichkeit, select(impf, !Datum))
# Pearson-Koeffizient
cor.test(uebersterblichkeit$ues, uebersterblichkeit$Impfquote_gesamt_voll)
uebersterblichkeit %>% select(Bundesland, ues, Impfquote_gesamt_voll) %>% arrange(desc(Impfquote_gesamt_voll))
sf20162020kws
sf20162020kws25ff
sf2021kws
sf20162020kws
# Sterblichkeitszahlen 2021
sf2021kws <- sf36bis40 %>% filter(Jahr==2021) %>% group_by(Bundesland) %>%
summarise(
deaths2021 = sum(value)
)
# einfacher Korrelationskoeffizient
uebersterblichkeit <- left_join(sf20162020kws, sf2021kws)
# Übersterblichkeits-Koeffizient hinzufügen
uebersterblichkeit <- mutate(uebersterblichkeit, ues = (deaths2021 / mean)*100)
# Impfquote hinzufügen
uebersterblichkeit <- left_join(uebersterblichkeit, select(impf, !Datum))
# Pearson-Koeffizient
cor.test(uebersterblichkeit$ues, uebersterblichkeit$Impfquote_gesamt_voll)
uebersterblichkeit %>% select(Bundesland, ues, Impfquote_gesamt_voll) %>% arrange(desc(Impfquote_gesamt_voll))
# Pearson-Koeffizient
cor.test(uebersterblichkeit$ues, uebersterblichkeit$Impfquote_gesamt_voll)
uebersterblichkeit %>% select(Bundesland, ues, Impfquote_gesamt_voll) %>% arrange(desc(Impfquote_gesamt_voll))
